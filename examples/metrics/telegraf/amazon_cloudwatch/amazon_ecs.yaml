kind: Metric
id: telegraf_cloudwatch_amazon_ecs_metrics
collector: telegraf
metadata:
  inputs:
    cloudwatch:
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/ECS"]
        metrics: # SELECT MAX(CPUUtilization) FROM SCHEMA("AWS/ECS", ClusterName) WHERE ClusterName = '"{{ cluster_name }}"'
          - names: ["CPUUtilization"] # When CPUUtilization decreases, indicating a reduced need for CPU resources, it becomes a candidate for scale-in. This may involve terminating unnecessary EC2 instances or reducing Fargate tasks. Conversely, when CPUUtilization increases, indicating a higher demand for CPU resources, it becomes a candidate for scale-out. This may involve launching additional EC2 instances or expanding Fargate tasks.
            statistic_include: ["maximum"] # Collect the metrics with the Maximum statistic.
            dimensions:
              - name: ClusterName
                value: "{{ cluster_name }}"
        tags:
          metric_id: telegraf_cloudwatch_amazon_ecs_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/ECS"]
        metrics: # SELECT MAX(MemoryUtilization) FROM SCHEMA("AWS/ECS", ClusterName) WHERE ClusterName = '"{{ cluster_name }}"'
          - names: ["MemoryUtilization"] # When MemoryUtilization decreases, indicating a reduced need for memory resources, it becomes a candidate for scale-in. This may involve terminating unnecessary EC2 instances or reducing Fargate tasks. Conversely, when MemoryUtilization increases, indicating a higher demand for memory resources, it becomes a candidate for scale-out. This may involve launching additional EC2 instances or expanding Fargate tasks.
            statistic_include: ["maximum"] # Collect the metrics with the Maximum statistic.
            dimensions:
              - name: ClusterName
                value: "{{ cluster_name }}"
        tags:
          metric_id: telegraf_cloudwatch_amazon_ecs_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/ECS"]
        metrics: # SELECT MAX(ActiveConnectionCount) FROM SCHEMA("AWS/ECS", ClusterName) WHERE ClusterName = '"{{ cluster_name }}"'
          - names: ["ActiveConnectionCount"] # If ActiveConnectionCount decreases, indicating fewer active connections, it may be considered for scale-in. Resources that are no longer needed can be released, or the number of tasks can be reduced. Conversely, if ActiveConnectionCount increases, indicating more active connections, it may be considered for scale-out. Additional tasks or expanded network resources can be deployed.
            statistic_include: ["maximum"] # Collect the metrics with the Maximum statistic.
            dimensions:
              - name: ClusterName
                value: "{{ cluster_name }}"
        tags:
          metric_id: telegraf_cloudwatch_amazon_ecs_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/ECS"]
        metrics: # SELECT MAX(NewConnectionCount) FROM SCHEMA("AWS/ECS", ClusterName) WHERE ClusterName = '"{{ cluster_name }}"'
          - names: ["NewConnectionCount"] # If NewConnectionCount decreases, indicating a decrease in new connections, it may be considered for scale-in. The number of tasks can be reduced, or expanded network resources can be removed. Conversely, if NewConnectionCount increases, indicating an increase in new connections, it may be considered for scale-out. Additional tasks or expanded network resources can be deployed.
            statistic_include: ["maximum"] # Collect the metrics with the Sample Count statistic.
            dimensions:
              - name: ClusterName
                value: "{{ cluster_name }}"
        tags:
          metric_id: telegraf_cloudwatch_amazon_ecs_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/ECS"]
        metrics: # SELECT MAX(GPUReservation) FROM SCHEMA("AWS/ECS", ClusterName) WHERE ClusterName = '"{{ cluster_name }}"'
          - names: ["GPUReservation"] # If additional GPU resources are required to handle GPU workloads, it may be considered for scale-out. This could involve launching additional EC2 GPU instances or expanding Fargate GPU tasks.
            statistic_include: ["maximum"] # Collect the metrics with the Maximum statistic.
            dimensions:
              - name: ClusterName
                value: "{{ cluster_name }}"
        tags:
          metric_id: telegraf_cloudwatch_amazon_ecs_metrics
  outputs:
    wave-autoscale: {}
  agent:
    interval: "10s" # Default data collection interval for all inputs. Intervals are durations of time and can be specified for supporting settings by combining an integer value and time unit as a string value. Valid time units are ns, us (or Âµs), ms, s, m, h.
    round_interval: true # Rounds collection interval to interval ie, if interval="10s" then always collect on :00, :10, :20, etc.
    metric_batch_size: 1000 # Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics. This controls the size of writes that Telegraf sends to output plugins.
    metric_buffer_limit: 10000 # Maximum number of unwritten metrics per output. Increasing this value allows for longer periods of output downtime without dropping metrics at the cost of higher maximum memory usage.
    collection_jitter: "0s" # Collection jitter is used to jitter the collection by a random interval. Each plugin will sleep for a random time within jitter before collecting. This can be used to avoid many plugins querying things like sysfs at the same time, which can have a measurable effect on the system.
    flush_interval: "1s" # Default flushing interval for all outputs. Maximum flush_interval will be flush_interval + flush_jitter.
    flush_jitter: "0s" # Default flush jitter for all outputs. This jitters the flush interval by a random amount. This is primarily to avoid large write spikes for users running a large number of telegraf instances. ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s.
    precision: "0s" # Collected metrics are rounded to the precision specified as an interval. Precision will NOT be used for service inputs. It is up to each individual service input to set the timestamp at the appropriate precision.
    debug: false # Log at debug level.
---

