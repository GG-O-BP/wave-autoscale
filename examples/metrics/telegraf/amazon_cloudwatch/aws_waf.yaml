kind: Metric
id: telegraf_cloudwatch_aws_waf_metrics
collector: telegraf
metadata:
  inputs:
    cloudwatch:
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(AllowedRequests) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["AllowedRequests"] # This metric tracks the number of allowed web requests. From a scaling perspective, if the "Allowed Requests" metric decreases, it indicates a reduction in traffic, making scale-in a potential consideration. Conversely, if the metric increases, it signals a traffic surge, warranting consideration for scale-out.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(BlockedRequests) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["BlockedRequests"] # This metric monitors the number of blocked web requests. In terms of scaling, a decrease in the "Blocked Requests" metric suggests a decline in blocked traffic, prompting consideration for scale-in. Conversely, an increase in this metric implies a rise in blocked traffic, making scale-out a relevant consideration.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(CountedRequests) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["CountedRequests"] # This metric reflects the number of web requests matching at least one rule. In the context of scaling, a decrease in the "Counted Requests" metric indicates a reduction in traffic matched by rules, prompting consideration for scale-in. Conversely, an increase in this metric signifies more traffic matched by rules, making scale-out a consideration.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(RequestsWithValidCaptchaToken) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["RequestsWithValidCaptchaToken"] # This metric records the number of web requests with CAPTCHA challenges. Regarding scaling, a decrease in "CAPTCHA Requests" suggests a decrease in CAPTCHA challenge usage, making scale-in a consideration. Conversely, an increase in this metric implies heightened CAPTCHA challenge usage, warranting consideration for scale-out.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(ChallengeRequests) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["ChallengeRequests"] # This metric tracks the number of web requests resolved with valid CAPTCHA tokens. From a scaling perspective, a decrease in "Requests With Valid CAPTCHA Token" indicates a decrease in successful CAPTCHA resolutions, prompting consideration for scale-in. Conversely, an increase in this metric suggests more successful CAPTCHA resolutions, making scale-out a relevant consideration.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
      - region: "{{ region }}"
        profile: "{{ profile }}"
        period: "1m"
        delay: "1m"
        interval: "1m"
        namespaces: ["AWS/WAFV2"]
        metrics: # SELECT SUM(ChallengeRequests) FROM SCHEMA("AWS/WAFV2", Region,Rule,WebACL) WHERE WebACL = '"{{ web_acl_name }}"' AND Region = '"{{ region }}"' AND Rule = '"{{ rule_name }}"'
          - names: ["ChallengeRequests"] # This metric monitors the number of web requests with challenge controls applied. In terms of scaling, a decrease in "Challenge Requests" implies a reduction in challenge control usage, prompting consideration for scale-in. Conversely, an increase in this metric indicates an uptick in challenge control usage, making scale-out a relevant consideration. These metrics enable informed decisions for scaling based on traffic patterns and resource needs.
            statistic_include: ["sum"] # Collect the metrics with the Sum statistic.
            dimensions:
              - name: Region
                value: "{{ region }}"
              - name: Rule
                value: "{{ rule_name }}"
              - name: WebACL
                value: "{{ web_acl_name }}"
        tags:
          metric_id: telegraf_cloudwatch_aws_waf_metrics
  outputs:
    wave-autoscale: {}
  agent:
    interval: "10s" # Default data collection interval for all inputs. Intervals are durations of time and can be specified for supporting settings by combining an integer value and time unit as a string value. Valid time units are ns, us (or Âµs), ms, s, m, h.
    round_interval: true # Rounds collection interval to interval ie, if interval="10s" then always collect on :00, :10, :20, etc.
    metric_batch_size: 1000 # Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics. This controls the size of writes that Telegraf sends to output plugins.
    metric_buffer_limit: 10000 # Maximum number of unwritten metrics per output. Increasing this value allows for longer periods of output downtime without dropping metrics at the cost of higher maximum memory usage.
    collection_jitter: "0s" # Collection jitter is used to jitter the collection by a random interval. Each plugin will sleep for a random time within jitter before collecting. This can be used to avoid many plugins querying things like sysfs at the same time, which can have a measurable effect on the system.
    flush_interval: "1s" # Default flushing interval for all outputs. Maximum flush_interval will be flush_interval + flush_jitter.
    flush_jitter: "0s" # Default flush jitter for all outputs. This jitters the flush interval by a random amount. This is primarily to avoid large write spikes for users running a large number of telegraf instances. ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s.
    precision: "0s" # Collected metrics are rounded to the precision specified as an interval. Precision will NOT be used for service inputs. It is up to each individual service input to set the timestamp at the appropriate precision.
    debug: false # Log at debug level.
---

