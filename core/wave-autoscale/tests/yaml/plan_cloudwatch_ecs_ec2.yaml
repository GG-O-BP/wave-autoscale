---
kind: Metric
id: cloudwatch_cpu_max
metric_kind: cloudwatch-data
metadata:
  region: ap-northeast-3
  access_key: {{ env.access_key }}
  secret_key: {{ env.secret_key }}
  polling_interval: 60000
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetMetricData.html
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDataQuery.html
  expression: "SELECT MAX(CPUUtilization) FROM SCHEMA(\"AWS/ECS\", ClusterName) WHERE ClusterName = 'wave-test-cluster10'"
  period: 5
  duration_seconds: 120
  # TODO: support MetricStat
---
kind: ScalingComponent
id: aws_ecs_ec2_service_scaling_server
component_kind: amazon-ecs
metadata:
  region: ap-northeast-3
  access_key: {{ env.access_key }}
  secret_key: {{ env.secret_key }}
  cluster_name: wave-test-cluster10
  service_name: wave-test-cluster10-service3
---
kind: ScalingPlan
id: scaling_plan_ecs_ec2_service_scaling
title: "Scaling Plan for ECS Service Scaling"
plans:
  - id: scale-out-plan-1
    description: "Scale out if CPU usage is greater than 2%."
    # JavaScript expression that returns a boolean value.
    expression: "cloudwatch_cpu_max >= 3"
    # Higher priority values will be checked first.
    priority: 1
    scaling_components:
      - component_id: aws_ecs_ec2_service_scaling_server
        # JavaScript expression that returns an integer.
        desired: 2
  - id: scale-out-plan-2
    description: "Scale out if CPU usage is greater than 80%."
    expression: "cloudwatch_cpu_max >= 80"
    priority: 2
    scaling_components:
      - component_id: aws_ecs_ec2_service_scaling_server
        desired: "Math.floor(cloudwatch_cpu_max / 5)"
  - id: scale-in-plan-3
    description: "Scale in if CPU usage is less than 1%."
    expression: "cloudwatch_cpu_max < 1"
    priority: 3
    scaling_components:
      - component_id: aws_ecs_ec2_service_scaling_server
        desired: 1
